import java.net.HttpURLConnection;
import java.net.URL;
import processing.core.PImage;
import processing.core.PVector;

ArrayList<PVector> points;
ArrayList<Float> pointSizes;
ArrayList<Connection> connections;

int currentDirection = 0; // 
PImage img;

void setup() {
  size(1200, 900);
  img = loadImage("sampling point route.png");
  
  if (img != null) {
    img = resizeImageToFitCanvas(img, width, height);
  } else {
    println("图片加载失败，请检查文件名和路径！");
  }

  points = new ArrayList<PVector>();
  pointSizes = new ArrayList<Float>();
  connections = new ArrayList<Connection>();
}

void draw() {
  background(255);
  
  if (img != null) {
    image(img, (width - img.width) / 2, (height - img.height) / 2);
  }

  for (int i = 0; i < points.size(); i++) {
    PVector point = points.get(i);
    float size = pointSizes.get(i);
    
    fill(211, 255, 177);
    noStroke();
    ellipse(point.x, point.y, size, size);

    if (size < 45) {
      pointSizes.set(i, size + 3);
    }
  }

  for (Connection conn : connections) {
    conn.update();
    conn.display();
  }
}

void mousePressed() {
  PVector newPoint = new PVector(mouseX, mouseY);
  points.add(newPoint);
  pointSizes.add(0.0);

  // 根据当前方向发送命令
  if (currentDirection == 0) {
    sendCommand("RIGHT");    
    currentDirection = 1;    
  } else if (currentDirection == 1) {
    sendCommand("LEFT");     
    currentDirection = 0;    
  }

  // 如果有上一个点，则创建一个新的连接
  if (points.size() > 1) {
    PVector prevPoint = points.get(points.size() - 2);
    Connection newConnection = new Connection(prevPoint, newPoint);
    connections.add(newConnection);
  }
}

void sendCommand(String command) {
  try {
    String urlString = "http://192.168.1.13/?command=" + command;
    URL url = new URL(urlString);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.setRequestMethod("GET");
    connection.getResponseCode();
    connection.disconnect();
  } catch (Exception e) {
    e.printStackTrace();
  }
}

PImage resizeImageToFitCanvas(PImage img, int canvasWidth, int canvasHeight) {
  float imgAspect = (float) img.width / img.height;
  float canvasAspect = (float) canvasWidth / canvasHeight;
  
  if (imgAspect > canvasAspect) {
    img.resize(canvasWidth, 0);
  } else {
    img.resize(0, canvasHeight);
  }
  
  return img;
}

class Connection {
  PVector startPoint;
  PVector endPoint;
  float progress;
  float speed;
  int colR, colG, colB;
  
  Connection(PVector start, PVector end) {
    startPoint = start.copy();
    endPoint = end.copy();
    progress = 0.0;
    speed = 0.05;
    colR = 211;
    colG = 255;
    colB = 177;
  }
  
  void update() {
    if (progress < 1.0) {
      progress += speed;
      if (progress > 1.0) {
        progress = 1.0;
      }
    }
  }
  
  void display() {
    float currentX = lerp(startPoint.x, endPoint.x, progress);
    float currentY = lerp(startPoint.y, endPoint.y, progress);
    int alpha = int(map(progress, 0, 1, 0, 255));
    stroke(colR, colG, colB, alpha);
    strokeWeight(4);
    drawDashedLine(startPoint.x, startPoint.y, currentX, currentY, 12);
  }
  
  void drawDashedLine(float x1, float y1, float x2, float y2, float dashLength) {
    float distance = dist(x1, y1, x2, y2);
    float dashCount = distance / (2 * dashLength);
    
    for (float i = 0; i < dashCount; i++) {
      float startX = lerp(x1, x2, i / dashCount);
      float startY = lerp(y1, y2, i / dashCount);
      float endX = lerp(x1, x2, (i + 0.5) / dashCount);
      float endY = lerp(y1, y2, (i + 0.5) / dashCount);
      line(startX, startY, endX, endY);
    }
  }
  
  boolean isFinished() {
    return progress >= 1.0;
  }
}
